name: Build

on: push

jobs:
  env:
    name: Initialize environment
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
      gradle-args: ${{ steps.gradle.outputs.args }}
      make-args: VERSION=${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: version
        name: Compute application version
        run: |
          echo ${GITHUB_REF#refs/head/}
          if echo ${GITHUB_REF#refs/head/} | grep -q "refs/heads/release/"; then
            BASE_VERSION=$(echo ${GITHUB_REF#refs/head/} | grep -Po 'refs/heads/release/\K(.+)')
            echo "Base version: $BASE_VERSION"
            git fetch --tags origin tag "v$BASE_VERSION.*"
            echo "Current tags for base version $BASE_VERSION:"
            git tag -l "v$BASE_VERSION.*"
            VERSION=$(git tag -l "v$BASE_VERSION.*" | cut -c2- | java VersionBumper.java $BASE_VERSION)
          else
            VERSION="0-dev-$(echo $GITHUB_SHA | cut -c1-7)"
          fi
          echo "Setting version to $VERSION"
          echo ::set-output name=version::$VERSION
          echo ::set-output name=tag::"v$VERSION"

      - id: gradle
        name: Compute gradlew args
        run: echo ::set-output name=args::"-Pversion=${{ steps.version.outputs.version }} --console=plain --no-daemon"

      - name: Echo env details
        run: |
          echo "Application version is ${{ steps.version.outputs.version }} / tag ${{ steps.version.outputs.tag }}"
          echo "Gradle args are: ${{ steps.gradle.outputs.args }}"

  build:
    name: Build & Test
    needs: [ env ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Environment check
        run: ./gradlew -v

      - name: Build application
        run: |
          ./gradlew ${{ needs.env.outputs.gradle-args }} build
          mv build/distributions/symly-${{ needs.env.outputs.version }}.zip build/distributions/symly_${{ needs.env.outputs.version }}_jvm.zip

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: build/test-results/**/*.xml

      - name: Upload test reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-reports
          path: |
            build/reports
            build/test-results

      - name: Upload distribution
        uses: actions/upload-artifact@v2
        with:
          name: symly_${{ needs.env.outputs.version }}_jvm
          path: build/distributions/symly_${{ needs.env.outputs.version }}_jvm.zip

  package:
    name: Package
    needs: [ env ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - arch: linux-amd64
            os: ubuntu-20.04
            gu-binary: gu
          - arch: macos-x86_64
            os: macos-latest
            gu-binary: gu
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore GraalVM tooling cache
        uses: actions/cache@v2
        with:
          path: |
            ~/tools
          key: ${{ matrix.arch }}-${{ hashFiles('Makefile') }}

      - name: Install GraalVM
        run: make install-requirements ${{ needs.env.outputs.make-args }}

      - name: Build application
        run: make build ${{ needs.env.outputs.make-args }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: symly_${{ needs.env.outputs.version }}_${{ matrix.arch }}
          path: build/libs/symly

  package-linux:
    name: Linux packaging
    runs-on: ubuntu-20.04
    needs: [ env, package ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: symly_${{ needs.env.outputs.version }}_linux-amd64
          path: build/libs/

      - name: Build debian package application
        run: ./gradlew ${{ needs.env.outputs.gradle-args }} buildDebianPackage

      - name: Debian package installation verification
        run: sudo dpkg -i build/packaging/symly_${{ needs.env.outputs.version }}_amd64.deb

      - name: Debian package post-installation verification
        run: symly --version

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: symly_${{ needs.env.outputs.version }}_amd64.deb
          path: build/packaging/symly_${{ needs.env.outputs.version }}_amd64.deb

  release:
    # This is done as a separate task from the package step
    # so that we only create the release if all packaging jobs succeeded
    name: Release
    if: startsWith(github.ref, 'refs/heads/release/')
    needs: [ env, build, package, package-linux ]

    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: build/artifacts/

      - name: Prepare artifacts
        run: |
          rm -rf test-reports
          find . -type f -exec sha256sum {} \; > sha256sum.txt
          zip symly_${{ needs.env.outputs.version }}_linux-amd64.zip symly_${{ needs.env.outputs.version }}_linux-amd64/symly
          zip symly_${{ needs.env.outputs.version }}_macos-x86_64.zip symly_${{ needs.env.outputs.version }}_macos-x86_64/symly
          rm symly_${{ needs.env.outputs.version }}_linux-amd64/symly
          rm symly_${{ needs.env.outputs.version }}_macos-x86_64/symly
        working-directory: build/artifacts/

      - id: create-release
        name: Create Release ${{ needs.env.outputs.version }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.env.outputs.tag }}
          release_name: Release ${{ needs.env.outputs.version }}

      - name: Upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          find .
          hub release edit $(find . -type f -printf "-a %p ") -m "" "${{ needs.env.outputs.tag }}"
        working-directory: build/artifacts/
        