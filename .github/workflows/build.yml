name: Build

on: push

jobs:
  env:
    name: Initialize environment
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      gradle-args: ${{ steps.gradle.outputs.args }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - id: version
        name: Compute application version
        run: |
          VERSION=$(./src/build-tools/compute-next-version.sh)
          echo "Setting version to $VERSION"
          echo ::set-output name=version::$VERSION

      - id: gradle
        name: Compute gradlew args
        run: echo ::set-output name=args::"-Pversion=${{ steps.version.outputs.version }} --info --console=plain"

  test:
    name: Test
    needs: [ env ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Environment check
        uses: gradle/gradle-build-action@v2
        with:
          arguments: -v

      - name: Build application
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ needs.env.outputs.gradle-args }} build

      - name: Re-run integration tests in opaque testing mode
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ needs.env.outputs.gradle-args }} integrationTest -PopaqueTesting=true

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: build/test-results/**/*.xml

      - name: Upload test reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-reports
          path: |
            build/reports
            build/test-results

      - id: create-pkg
        name: Build deb/rpm packages application
        run: |
          DEB_PATH=$(find build/distributions/ -name "*.deb")
          DEB_FILENAME=$(basename $DEB_PATH)
          RPM_PATH=$(find build/distributions/ -name "*.rpm")
          RPM_FILENAME=$(basename $RPM_PATH)
          echo ::set-output name=deb-path::$DEB_PATH
          echo ::set-output name=deb-filename::$DEB_FILENAME
          echo ::set-output name=rpm-path::$RPM_PATH
          echo ::set-output name=rpm-filename::$RPM_FILENAME

      - name: Debian package inspection
        run: |
          dpkg -I ${{ steps.create-pkg.outputs.deb-path }}
          dpkg -c ${{ steps.create-pkg.outputs.deb-path }}

      - name: RPM package inspection
        run: rpm -qlpi ${{ steps.create-pkg.outputs.rpm-path }}

      - name: Debian package installation verification
        run: |
          sudo apt install -y dpkg-dev
          sudo sh -c 'echo "deb [trusted=yes] file:/opt/local/debs ./" >> /etc/apt/sources.list'
          sudo mkdir -p /opt/local/debs
          sudo cp  ${{ steps.create-pkg.outputs.deb-path }} /opt/local/debs
          cd /opt/local/debs
          sudo sh -c 'dpkg-scanpackages . /dev/null > Release'
          sudo sh -c 'dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz'
          sudo apt update
          sudo apt install -y symly

      - name: Debian package post-installation verification
        run: symly --version

  release:
    name: Release
    if: startsWith(github.ref, 'refs/heads/release/')
    needs: [ env, test ]

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build application
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ needs.env.outputs.gradle-args }} build

      - name: Run JReleaser
        uses: jreleaser/release-action@v1
        with:
          version: 0.9.1
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.env.outputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.HOMEBREW_SYMLY_TOKEN }}
