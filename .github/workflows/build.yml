name: Build

on: push

jobs:
  env:
    name: Initialize environment
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
      gradle-args: ${{ steps.gradle.outputs.args }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: version
        name: Compute application version
        run: |
          echo ${GITHUB_REF#refs/head/}
          if echo ${GITHUB_REF#refs/head/} | grep -q "refs/heads/release/"; then
            BASE_VERSION=$(echo ${GITHUB_REF#refs/head/} | grep -Po 'refs/heads/release/\K(.+)')
            echo "Base version: $BASE_VERSION"
            git fetch --tags origin tag "v$BASE_VERSION.*"
            echo "Current tags for base version $BASE_VERSION:"
            git tag -l "v$BASE_VERSION.*"
            VERSION=$(git tag -l "v$BASE_VERSION.*" | cut -c2- | java VersionBumper.java $BASE_VERSION)
          else
            VERSION="0-dev+$(echo $GITHUB_SHA | cut -c1-7)"
          fi
          echo "Setting version to $VERSION"
          echo ::set-output name=version::$VERSION
          echo ::set-output name=tag::"v$VERSION"

      - id: gradle
        name: Compute gradlew args
        run: echo ::set-output name=args::"-Pversion=${{ steps.version.outputs.version }} --info --console=plain --no-daemon"

      - name: Echo env details
        run: |
          echo "Application version is ${{ steps.version.outputs.version }} / tag ${{ steps.version.outputs.tag }}"
          echo "Gradle args are: ${{ steps.gradle.outputs.args }}"

  test:
    name: Test
    needs: [ env ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Environment check
        run: ./gradlew -v

      - name: Build application
        run: |
          ./gradlew ${{ needs.env.outputs.gradle-args }} build
          find build

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: build/test-results/**/*.xml

      - name: Upload test reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-reports
          path: |
            build/reports
            build/test-results

      - id: create-pkg
        name: Build deb/rpm packages application
        run: |
          DEB_PATH=$(find build/distributions/ -name "*.deb")
          DEB_FILENAME=$(basename $DEB_PATH)
          RPM_PATH=$(find build/distributions/ -name "*.rpm")
          RPM_FILENAME=$(basename $RPM_PATH)
          echo ::set-output name=deb-path::$DEB_PATH
          echo ::set-output name=deb-filename::$DEB_FILENAME
          echo ::set-output name=rpm-path::$RPM_PATH
          echo ::set-output name=rpm-filename::$RPM_FILENAME

      - name: Debian package inspection
        run: |
          dpkg -I ${{ steps.create-pkg.outputs.deb-path }}
          dpkg -c ${{ steps.create-pkg.outputs.deb-path }}

      - name: RPM package inspection
        run: rpm -qlpi ${{ steps.create-pkg.outputs.rpm-path }}

      - name: Debian package installation verification
        run: |
          sudo apt install -y dpkg-dev
          sudo sh -c 'echo "deb [trusted=yes] file:/opt/local/debs ./" >> /etc/apt/sources.list'
          sudo mkdir -p /opt/local/debs
          sudo cp  ${{ steps.create-pkg.outputs.deb-path }} /opt/local/debs
          cd /opt/local/debs
          sudo sh -c 'dpkg-scanpackages . /dev/null > Release'
          sudo sh -c 'dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz'
          sudo apt update
          sudo apt install -y symly
          ls -l /usr/bin/symly
          find /usr/share/symly

      - name: Debian package post-installation verification
        run: |
          ls -l /usr/bin/symly
          find /usr/share/symly
          symly --version

  release:
    name: Release
    if: startsWith(github.ref, 'refs/heads/release/')
    needs: [ env, test ]

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build application
        run: ./gradlew ${{ needs.env.outputs.gradle-args }} build

      - name: Run JReleaser
        uses: jreleaser/release-action@v1
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.env.outputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
